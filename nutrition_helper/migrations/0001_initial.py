# Generated by Django 3.0.6 on 2020-05-19 10:51

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('vegan', 'vegan'), ('vegetarian', 'vegetarian'), ('halal', 'halal'), ('gluten-free', 'gluten-free'), ('low-lactose', 'low-lactose'), ('breakfast', 'breakfast'), ('dinner', 'dinner'), ('snack', 'snack'), ('dessert', 'dessert'), ('drink', 'drink'), ('meal', 'meal'), ('dairy', 'dairy'), ('grain', 'grain'), ('vegetable', 'vegetable'), ('fruit', 'fruit'), ('meat', 'meat'), ('side', 'side'), ('nut', 'nut')], default='dinner', max_length=11)),
            ],
        ),
        migrations.CreateModel(
            name='UserParams',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('age', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(110)])),
                ('weight', models.FloatField()),
                ('height', models.FloatField()),
                ('sex', models.CharField(choices=[('m', 'male'), ('f', 'female')], default='m', max_length=1)),
                ('goal', models.CharField(choices=[('lose', 'Lose weight'), ('maintain', 'Maintain weight'), ('gain', 'Gain weight')], default='maintain', max_length=8)),
                ('activity', models.CharField(choices=[('sedentary', 'Sedentary or lightly active'), ('moderate', 'Moderately active'), ('active', 'Active'), ('high', 'Highly active')], default='moderate', max_length=9)),
            ],
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('preferences', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('vegan', 'vegan'), ('vegetarian', 'vegetarian'), ('halal', 'halal'), ('gluten-free', 'gluten-free'), ('low-lactose', 'low-lactose')], max_length=11), blank=True, default=list, size=None)),
                ('meals', models.IntegerField(default=4, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(7)])),
            ],
        ),
        migrations.CreateModel(
            name='UserRequirements',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('bmr', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('tee', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('energy_requirements', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('proteins', models.PositiveIntegerField(blank=True, null=True)),
                ('fats', models.PositiveIntegerField(blank=True, null=True)),
                ('carbohydrates', models.PositiveIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('source_categories', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), default=list, size=None)),
                ('water', models.FloatField(blank=True, null=True)),
                ('protein', models.FloatField(blank=True, null=True)),
                ('fat', models.FloatField(blank=True, null=True)),
                ('carbohydrate', models.FloatField(blank=True, null=True)),
                ('sfa', models.FloatField(blank=True, null=True)),
                ('pufa', models.FloatField(blank=True, null=True)),
                ('cholesterol', models.FloatField(blank=True, null=True)),
                ('mds', models.FloatField(blank=True, null=True)),
                ('starch', models.FloatField(blank=True, null=True)),
                ('fiber', models.FloatField(blank=True, null=True)),
                ('organic_acid', models.FloatField(blank=True, null=True)),
                ('sodium', models.FloatField(blank=True, null=True)),
                ('potassium', models.FloatField(blank=True, null=True)),
                ('calcium', models.FloatField(blank=True, null=True)),
                ('magnesium', models.FloatField(blank=True, null=True)),
                ('phosphorus', models.FloatField(blank=True, null=True)),
                ('iron', models.FloatField(blank=True, null=True)),
                ('retinol', models.FloatField(blank=True, null=True)),
                ('beta_carotene', models.FloatField(blank=True, null=True)),
                ('retinol_eq', models.FloatField(blank=True, null=True)),
                ('tocopherol_eq', models.FloatField(blank=True, null=True)),
                ('thiamine', models.FloatField(blank=True, null=True)),
                ('riboflavin', models.FloatField(blank=True, null=True)),
                ('niacin', models.FloatField(blank=True, null=True)),
                ('niacin_eq', models.FloatField(blank=True, null=True)),
                ('vitamin_c', models.FloatField(blank=True, null=True)),
                ('energy', models.FloatField(blank=True, null=True)),
                ('portion', models.FloatField(blank=True, null=True)),
                ('categories', models.ManyToManyField(blank=True, related_name='foods', to='nutrition_helper.FoodCategory')),
            ],
        ),
    ]
